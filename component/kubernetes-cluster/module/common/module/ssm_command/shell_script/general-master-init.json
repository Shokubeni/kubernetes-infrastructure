{
  "schemaVersion": "2.2",
  "description": "Initialize general master node",
  "parameters": {
    "S3BucketRegion": {
      "type": "String"
    },
    "S3BucketName": {
      "type": "String"
    },
    "BalancerDNS": {
      "type": "String"
    },
    "ClusterId": {
      "type": "String"
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "Initialization",
      "inputs": {
        "runCommand": [
          "sudo su",
          "export PATH=/root/.linkerd2/bin:/root/bin:$PATH",
          "export HOME=/root",
          "mkdir -p /root/bin",

          "curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/linux/amd64/aws-iam-authenticator",
          "chmod +x ./aws-iam-authenticator && cp ./aws-iam-authenticator /root/bin/aws-iam-authenticator && aws-iam-authenticator init --cluster-id {{ ClusterId }}",
          "mkdir -p /etc/kubernetes/aws-iam-authenticator /var/aws-iam-authenticator",
          "mv cert.pem key.pem /var/aws-iam-authenticator/ && mv aws-iam-authenticator.kubeconfig /etc/kubernetes/aws-iam-authenticator/kubeconfig.yaml",
          "chmod +r -R /var/aws-iam-authenticator",
          "aws s3 cp /etc/kubernetes/aws-iam-authenticator/kubeconfig.yaml s3://{{ S3BucketName }}/configs/authenticator.conf --region {{ S3BucketRegion }} --content-type \"text/plain\"",
          "aws s3 cp /var/aws-iam-authenticator/cert.pem s3://{{ S3BucketName }}/certificates/authenticator-cert.pem --region {{ S3BucketRegion }} --content-type \"text/plain\"",
          "aws s3 cp /var/aws-iam-authenticator/key.pem s3://{{ S3BucketName }}/certificates/authenticator-key.pem --region {{ S3BucketRegion }} --content-type \"text/plain\"",

          "cat <<EOF >./kubeadm-config.yaml",
          "apiVersion: kubeadm.k8s.io/v1beta2",
          "kind: InitConfiguration",
          "nodeRegistration:",
          "  kubeletExtraArgs:",
          "    cloud-provider: \"aws\"",
          "---",
          "apiVersion: kubeadm.k8s.io/v1beta2",
          "kind: ClusterConfiguration",
          "kubernetesVersion: stable",
          "clusterName: \"{{ ClusterId }}\"",
          "controlPlaneEndpoint: \"{{ BalancerDNS }}:6443\"",
          "apiServer:",
          "  extraArgs:",
          "    authentication-token-webhook-config-file: \"/etc/kubernetes/aws-iam-authenticator/kubeconfig.yaml\"",
          "    cloud-provider: \"aws\"",
          "  extraVolumes:",
          "  - name: aws-iam-authenticator",
          "    hostPath: /etc/kubernetes/aws-iam-authenticator",
          "    mountPath: /etc/kubernetes/aws-iam-authenticator",
          "  certSANs:",
          "  - \"{{ BalancerDNS }}\"",
          "controllerManager:",
          "  extraArgs:",
          "    cloud-provider: \"aws\"",
          "EOF",

          "kubeadm init --config=kubeadm-config.yaml",
          "mkdir -p /root/.kube && cp -i /etc/kubernetes/admin.conf /root/.kube/config && chown $(id -u):$(id -g) /root/.kube/config",
          "export KUBECONFIG=/root/.kube/config",
          "kubectl apply -f \"https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\\n')\"",

          "kubeadm token create --print-join-command > join-command",
          "aws s3 cp /etc/kubernetes/pki/ca.crt s3://{{ S3BucketName }}/certificates/ca.crt --region {{ S3BucketRegion }} --content-type \"text/plain\"",
          "aws s3 cp /etc/kubernetes/pki/ca.key s3://{{ S3BucketName }}/certificates/ca.key --region {{ S3BucketRegion }} --content-type \"text/plain\"",
          "aws s3 cp /etc/kubernetes/pki/sa.key s3://{{ S3BucketName }}/certificates/sa.key --region {{ S3BucketRegion }} --content-type \"text/plain\"",
          "aws s3 cp /etc/kubernetes/pki/sa.pub s3://{{ S3BucketName }}/certificates/sa.pub --region {{ S3BucketRegion }} --content-type \"text/plain\"",
          "aws s3 cp /etc/kubernetes/pki/front-proxy-ca.crt s3://{{ S3BucketName }}/certificates/front-proxy-ca.crt --region {{ S3BucketRegion }} --content-type \"text/plain\"",
          "aws s3 cp /etc/kubernetes/pki/front-proxy-ca.key s3://{{ S3BucketName }}/certificates/front-proxy-ca.key --region {{ S3BucketRegion }} --content-type \"text/plain\"",
          "aws s3 cp /etc/kubernetes/pki/etcd/ca.crt s3://{{ S3BucketName }}/certificates/etcd/ca.crt --region {{ S3BucketRegion }} --content-type \"text/plain\"",
          "aws s3 cp /etc/kubernetes/pki/etcd/ca.key s3://{{ S3BucketName }}/certificates/etcd/ca.key --region {{ S3BucketRegion }} --content-type \"text/plain\"",
          "aws s3 cp /etc/kubernetes/admin.conf s3://{{ S3BucketName }}/configs/kubernetes.conf --region {{ S3BucketRegion }} --content-type \"text/plain\"",
          "aws s3 cp ./kubeadm-config.yaml s3://{{ S3BucketName }}/configs/kubeadm.conf --region {{ S3BucketRegion }} --content-type \"text/plain\"",
          "aws s3 cp ./join-command s3://{{ S3BucketName }}/commands/join-command --region {{ S3BucketRegion }} --content-type \"text/plain\"",
          "rm ./join-command",

          "wget https://github.com/vmware-tanzu/velero/releases/download/v1.2.0/velero-v1.2.0-linux-amd64.tar.gz -O velero.tar.gz",
          "mkdir velero && tar -xvf velero.tar.gz -C ./velero && cp velero/velero-v1.2.0-linux-amd64/velero /root/bin",
          "rm velero.tar.gz && rm -rf velero",
          "aws s3 cp s3://{{ S3BucketName }}/workload/velero.yaml ./velero-workload.yaml --region {{ S3BucketRegion }}",
          "kubectl apply -f ./velero-workload.yaml && rm ./velero-workload.yaml",

          "curl -sL https://run.linkerd.io/install | sh",
          "linkerd install --ignore-cluster | kubectl apply -f -"
        ]
      }
    }
  ]
}
