---

apiVersion: batch/v1
kind: Job
metadata:
  namespace: monitoring
  name: import-dashboards
spec:
  template:
    metadata:
      name: import-dashboards
    spec:
      serviceAccountName: monitoring
      restartPolicy: Never
      initContainers:
        - name: wait-grafana
          image: giantswarm/tiny-tools
          args:
            - /bin/sh
            - -c
            - >
              set -x;
              while [ $(curl -Lsw '%{http_code}' "http://grafana:3000" -o /dev/null) -ne 200 ]; do
                echo '.'
                sleep 15;
              done
      containers:
        - name: load-dashboards
          image: giantswarm/tiny-tools
          command: ["/bin/sh", "-c"]
          args:
            - >
              for file in /opt/datasource/*-datasource.json ; do
                if [ -e "$file" ] ; then
                  echo "importing $file" &&
                  curl --silent --fail --show-error \
                    --request POST http://${GF_ADMIN_USER}:${GF_ADMIN_PASSWORD}@grafana:3000/api/datasources \
                    --header "Content-Type: application/json" \
                    --data-binary "@$file" ;
                  echo "" ;
                fi
              done ;
              for file in /opt/dashboards/ingress/*-dashboard.json /opt/dashboards/cluster/*-dashboard.json ; do
                if [ -e "$file" ] ; then
                  echo "importing $file" &&
                  ( echo '{"dashboard":'; \
                    cat "$file"; \
                    echo ',"overwrite":true,"inputs":[{"name":"DS_PROMETHEUS","type":"datasource","pluginId":"prometheus","value":"prometheus"}]}' ) \
                  | jq -c '.' \
                  | curl --silent --fail --show-error \
                    --request POST http://${GF_ADMIN_USER}:${GF_ADMIN_PASSWORD}@grafana:3000/api/dashboards/db \
                    --header "Content-Type: application/json" \
                    --data-binary "@-" ;
                  echo "" ;
                fi
              done
          env:
            - name: GF_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-admin
                  key: username
            - name: GF_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-admin
                  key: password
          volumeMounts:
            - name: ingress-dashboard
              mountPath: /opt/dashboards/ingress
            - name: cluster-dashboard
              mountPath: /opt/dashboards/cluster
            - name: prometheus-source
              mountPath: /opt/datasource
      volumes:
        - name: ingress-dashboard
          configMap:
            name: ingress-dashboard
        - name: cluster-dashboard
          configMap:
            name: cluster-dashboard
        - name: prometheus-source
          configMap:
            name: prometheus-source
      tolerations:
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
      nodeSelector:
        node-role.kubernetes.io/master: ""

---